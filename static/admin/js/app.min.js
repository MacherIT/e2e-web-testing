"use strict";angular.module("AdminApp",["ngRoute"]).controller("mainController",["$scope","$location","$rootScope","auth",function(a,u,o,e){o.isLoggedIn=e.isLoggedIn(),a.rutas=[],o.$on("$routeChangeSuccess",function(){a.rutas=[];var o=u.path().split("/");if(""!=o[1]){for(var e="",r="",t=0;t<o.length;t++)if(""!=o[t]){var n;e+=r+o[t],n=o[t]=o[t].replace(/-/g," "),a.rutas.push({nombre:n,link:e,active:!1}),r="/"}a.rutas[a.rutas.length-1].active=!0}}),o.deleteProp=function(o,e){delete o[e]}}]),angular.module("AdminApp").config(["$routeProvider","$locationProvider",function(o,e){e.hashPrefix(""),o.when("/usuarios",{templateUrl:"views/usuario/index.html",controller:"usuario.index"}).when("/usuarios/registrar",{templateUrl:"views/usuario/new.html",controller:"usuario.new"}).when("/usuarios/iniciar-sesion",{templateUrl:"views/usuario/login.html",controller:"usuario.login"}).when("/usuarios/cerrar-sesion",{templateUrl:"views/home/index.html",resolve:{secureAccess:["auth","$window",function(o,e){o.isLoggedIn()||(e.location.href="#/",e.location.reload())}]},controller:"usuario.logout"}).when("/usuarios/perfil",{templateUrl:"views/usuario/perfil.html",resolve:{secureAccess:["auth","$window",function(o,e){o.isLoggedIn()||(e.location.href="#/",e.location.reload())}]},controller:"usuario.show"}).when("/usuario/:id",{templateUrl:"views/user/show.html",controller:"user.show"}).otherwise({templateUrl:"views/home/index.html",redirectTo:"/"})}]),angular.module("AdminApp").factory("auth",["$http","$window",function(e,r){var t=function(o){r.localStorage["mtgroup-token"]=o},n=function(){return r.localStorage["mtgroup-token"]},o={headers:{Authorization:"Bearer "+n()}},a=function(){var o,e=n();return!!e&&(o=e.split(".")[1],o=r.atob(o),(o=JSON.parse(o)).exp>Date.now()/1e3)};return{currentUser:function(){if(a()){var o=n().split(".")[1];return o=r.atob(o),{email:(o=JSON.parse(o)).email,name:o.name}}},saveToken:t,getToken:n,secureKey:o,isLoggedIn:a,register:function(o){return e.post("/api/usuarios",o).then(function(o){t(o.data.token)})},updateUser:function(o){return e.put("/api/usuarios/perfil",o,{headers:{Authorization:"Bearer "+n()}}).then(function(o){})},login:function(o){return e.post("/api/usuarios/login",o).then(function(o){return t(o.data.token),o},function(o){return o})},logout:function(){r.localStorage.removeItem("mtgroup-token")}}}]),angular.module("AdminApp").factory("dataProvider",["$http","auth",function(e,r){return{getPerfil:function(){return e.get("/api/usuarios/perfil",r.secureKey)},getUsuario:function(o){return e.get("/api/usuarios/"+o,r.secureKey)},getUsuarios:function(){return e.get("/api/usuarios",r.secureKey)}}}]),angular.module("AdminApp").factory("imageUploader",["$http","auth",function(t,n){return{uploadFiles:function(o){for(var e=new FormData,r=0;r<o.length;r++)e.append("imagenes",o[r]);return t.post("/upload",e,{headers:{transformRequest:angular.identity,"Content-Type":void 0,Authorization:"Bearer "+n.getToken()}}).then(function(o){return o})}}}]),angular.module("UsuarioModule",[]),angular.module("UsuarioModule").controller("usuario.login",["$scope","$window","auth",function(e,r,o){o.isLoggedIn()?(r.location.href="#/user",r.location.reload()):(e.email="",e.password="",e.failLogin=!1,e.sendForm=function(){o.login({email:e.email,password:e.password}).then(function(o){401===o.status?e.failLogin=!0:(r.location.href="#/user",r.location.reload())})})}]),angular.module("UsuarioModule").controller("usuario.logout",["$scope","$window","auth",function(o,e,r){r.logout(),e.location.href="#/",e.location.reload()}]),angular.module("UsuarioModule").controller("usuario.new",["$scope","$window","auth","dataProvider","$http",function(r,t,n,o,a){n.isLoggedIn()?(t.location.href="#/user",t.location.reload()):(r.nuevoUsuario={email:"",nombre:"",apellido:""},r.registrarUsuario=function(){r.f=document.getElementById("usuario-avatar").files[0],r.notMatch=!1,r.dupped=!1,r.passwordCheck===r.nuevoUsuario.password?n.register(r.nuevoUsuario).then(function(o){if(n.isLoggedIn()){if(r.f){var e=new FormData;e.append("imagenes",r.f),console.log(e),a.post("/upload",e,{headers:{transformRequest:angular.identity,"Content-Type":void 0,Authorization:"Bearer "+n.getToken()}}).then(function(o){200===o.status&&(r.nuevoUsuario.avatar=o.data[0].uri,n.updateUser(r.nuevoUsuario).then(function(o){t.location.href="#/usuarios/perfil",t.location.reload()}).catch(function(o){console.log(o)}))})}}else t.location.href="#/usuarios/perfil",t.location.reload()}).catch(function(o){console.log(o),o.data.error.code&&(r.dupped=11e3==o.data.error.code)}):r.notMatch=!0})}]),angular.module("UsuarioModule").controller("usuario.show",["$scope","dataProvider",function(e,o){e.usuario={},o.getPerfil().then(function(o){console.log(o),e.usuario=o.data}).catch(function(o){console.log(o)})}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
